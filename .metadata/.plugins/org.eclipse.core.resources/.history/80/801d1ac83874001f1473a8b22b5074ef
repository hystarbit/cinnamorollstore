package com.cinnamoroll.view.item;

import java.io.File;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.cinnamoroll.store.item.ItemService;
import com.cinnamoroll.store.item.ItemVO;
import com.cinnamoroll.store.order.OrderVO;
import com.cinnamoroll.store.user.UserService;
import com.cinnamoroll.store.user.UserVO;

@Controller
public class ItemController {

	@Autowired
	private ItemService itemService; // ItemService를 주입

	@Autowired
	private UserService userService; // UserService를 주입, admin페이지 권한 문제를 위해 도입

	@Value("#{uploadPath}")
	private String uploadPath;

	@RequestMapping(value = "imgLoad.do")
	public void imgLoad(HttpServletRequest req, HttpServletResponse res) throws Exception {
		String fileName = req.getParameter("fileName");

		String path = uploadPath + "/";
		File file = new File(path, fileName);

		res.setHeader("Content-Length", String.valueOf(file.length()));
		res.setHeader("Content-Disposition", "inline; filename=\"" + file.getName() + "\"");
		Files.copy(file.toPath(), res.getOutputStream());
	}

	@RequestMapping("/main.do")
	public String mainImage(ItemVO vo, Model model) {
		vo.setStart(1);
		vo.setEnd(4);
		
		vo.setCategory("문구");
		List<ItemVO> stationaryItems = itemService.getItemDisplayCategoryListPage(vo);
		model.addAttribute("stationaryItems", stationaryItems);

		vo.setCategory("필기");
		List<ItemVO> writingItems = itemService.getItemDisplayCategoryListPage(vo);
		model.addAttribute("writingItems", writingItems);

		vo.setCategory("소품");
		List<ItemVO> propsItems = itemService.getItemDisplayCategoryListPage(vo);
		model.addAttribute("propsItems", propsItems);
		return "/user/main/index.jsp";
	}

	@RequestMapping("/info.do")
	public String storeInfo() {
		return "/user/introduction/storeInfo.jsp";
	}

	@RequestMapping("/itemList.do")
	public String itemListStationary(ItemVO vo, Model model, String category, String pageNum) {
		String categoryName = "";
		if (category.equals("all")) {
			categoryName = "전체 상품";
		} else if (category.equals("stationary")) {
			categoryName = "문구";
		} else if (category.equals("writing")) {
			categoryName = "필기";
		} else if (category.equals("props")) {
			categoryName = "소품";
		}

		int totalCount = 0;
		if (category.equals("all")) {
			// 전체 상품일 때 전체 진열 상품의 갯수 구하기
			totalCount = itemService.getItemDisplayCount();
		} else {
			// 각 카테고리 상품일 때 카테고리 진열 상품의 갯수 구하기
			vo.setCategory(categoryName);
			totalCount = itemService.getItemDisplayCategoryCount(vo);
		}

		int pageSize = 20;

		// 전체 페이지 수 계산
		int totalPages = (int) Math.ceil((double) totalCount / pageSize);

		// 현재 페이지 계산
		int currentPage = 1;
		if (pageNum != null && !pageNum.equals("")) {
			currentPage = Integer.parseInt(pageNum);
		}

		// 현재 페이지에 보여줄 아이템리스트
		int start = (currentPage - 1) * pageSize + 1;
		int end = currentPage * pageSize;

		vo.setStart(start);
		vo.setEnd(end);

		if (category.equals("all")) {
			// 전체 상품일 때 전체 진열 상품 페이지별로 보여주기
			List<ItemVO> items = itemService.getItemDisplayListPage(vo);
			model.addAttribute("items", items);
		} else {
			// 각 카테고리 상품일 때 카테고리 진열 상품 페이지별로 보여주기
			List<ItemVO> items = itemService.getItemDisplayCategoryListPage(vo);
			model.addAttribute("items", items);
		}

		model.addAttribute("category", category);
		model.addAttribute("categoryName", categoryName);

		// 현재 페이지 블록의 시작과 끝페이지 계산
		int pageBlock = 5; // 페이지 블록 단위
		int startPage = ((currentPage - 1) / pageBlock) * pageBlock + 1;
		int endPage = Math.min(startPage + pageBlock - 1, totalPages);

		// 한 페이지의 게시물 시작과 끝
		model.addAttribute("currentPage", currentPage);
		model.addAttribute("totalPages", totalPages);
		model.addAttribute("startPage", startPage);
		model.addAttribute("endPage", endPage);
		return "/user/itemInfo/itemList.jsp";
	}

	@RequestMapping("/itemDetail.do")
	public String itemDetail(ItemVO vo, Model model) {
		ItemVO item = itemService.getItem(vo);
		model.addAttribute("item", item);
		return "/user/itemInfo/itemDetail.jsp";
	}
	
	@RequestMapping("/search.do")
	public String itemSearch(ItemVO vo, Model model,
			String tab, String pageNum, String searchItem) {
		int pageSize = 20;

		// 현재 페이지 계산
		int currentPage = 1;
		if (pageNum != null && !pageNum.equals("")) {
			currentPage = Integer.parseInt(pageNum);
		}

		// 현재 페이지에 보여줄 리스트
		int start = (currentPage - 1) * pageSize + 1;
		int end = currentPage * pageSize;

		vo.setStart(start);
		vo.setEnd(end);

		if (tab == null || tab.isEmpty()) {
			tab = "all";
		}
		//System.out.println(tab);
		model.addAttribute("activeTab", tab);
		
		vo.setSearchItem(searchItem);
		model.addAttribute("searchItem", searchItem);
		
		List<ItemVO> items = new ArrayList<ItemVO>();
		int totalCount = 0;

		if (tab.equals("all")) {
			vo.setStart(1);
			vo.setEnd(4);
			
			vo.setCategory("문구");
			int stationaryCount = itemService.getItemSearchCategoryCount(vo);
			List<ItemVO> stationaryItems = itemService.getItemSearchCategoryListPage(vo);
			model.addAttribute("stationaryCount", stationaryCount);
			model.addAttribute("stationaryItems", stationaryItems);

			vo.setCategory("필기");
			int writingCount = itemService.getItemSearchCategoryCount(vo);
			List<ItemVO> writingItems = itemService.getItemSearchCategoryListPage(vo);
			model.addAttribute("writingCount", writingCount);
			model.addAttribute("writingItems", writingItems);

			vo.setCategory("소품");
			int propsCount = itemService.getItemSearchCategoryCount(vo);
			List<ItemVO> propsItems = itemService.getItemSearchCategoryListPage(vo);
			model.addAttribute("propsCount", propsCount);
			model.addAttribute("propsItems", propsItems);
			
		} else {
			if (tab.equals("stationary")) {
				vo.setCategory("문구");
			} else if (tab.equals("writing")) {
				vo.setCategory("필기");
			} else if (tab.equals("props")) {
				vo.setCategory("소품");
			}
			totalCount = itemService.getItemSearchCategoryCount(vo);
			items = itemService.getItemSearchCategoryListPage(vo);
			
			int totalPages = (int) Math.ceil((double) totalCount / pageSize);
			int pageBlock = 5;
			int startPage = ((currentPage - 1) / pageBlock) * pageBlock + 1; 
			int endPage = Math.min(startPage + pageBlock - 1, totalPages);
			
			model.addAttribute("items", items);
			model.addAttribute("currentPage", currentPage);
			model.addAttribute("totalPages", totalPages); 
			model.addAttribute("startPage", startPage); 
			model.addAttribute("endPage", endPage);
			model.addAttribute("totalCount", totalCount);
			model.addAttribute("pageSize", pageSize);
		}

		return "/user/search/search.jsp";
	}
	
	@RequestMapping("/admin/item/list.do")
	public String itemManageList(HttpSession session, ItemVO vo, Model model,
			String pageNum, String searchField, String searchWord) {
		UserVO user = (UserVO) session.getAttribute("user");
		if (user == null) {
			return "redirect:../login.do?error=nonUser";
		}

		String userGrade = user.getGrade();
		if (!userGrade.equals("관리자")) {
			session.invalidate();
			return "redirect:../login.do?error=nonAdmin";
		}
		
		
		boolean search = true;
		if (searchField == null && searchWord == null) {
			search = false;
		}
		
		int pageSize = 10;

		// 현재 페이지 계산
		int currentPage = 1;
		if (pageNum != null && !pageNum.equals("")) {
			currentPage = Integer.parseInt(pageNum);
		}

		// 현재 페이지에 보여줄 아이템리스트
		int start = (currentPage - 1) * pageSize + 1;
		int end = currentPage * pageSize;

		vo.setStart(start);
		vo.setEnd(end);
		
		List<ItemVO> items = new ArrayList<ItemVO>();
		int totalCount = 0;
		System.out.println(vo);
		/*
		if (search) {
			totalCount = itemService.getItemSearchCount(vo);
			items = itemService.getItemSearchListPage(vo);
		} else {
			totalCount = itemService.getItemCount();
			items = itemService.getItemListPage(vo);
		}
		*/
		
		model.addAttribute("items", items);
		
		// 전체 페이지 수 계산
		int totalPages = (int) Math.ceil((double) totalCount / pageSize);
				
		// 현재 페이지 블록의 시작과 끝페이지 계산
		int pageBlock = 5; // 페이지 블록 단위
		int startPage = ((currentPage - 1) / pageBlock) * pageBlock + 1;
		int endPage = Math.min(startPage + pageBlock - 1, totalPages);

		// 한 페이지의 게시물 시작과 끝
		model.addAttribute("currentPage", currentPage);
		model.addAttribute("totalPages", totalPages);
		model.addAttribute("startPage", startPage);
		model.addAttribute("endPage", endPage);
		
		model.addAttribute("totalCount", totalCount);
		model.addAttribute("pageSize", pageSize);
		
		model.addAttribute("searchField", searchField);
		model.addAttribute("searchWord", searchWord);

		return "/admin/itemManagement/itemManageList.jsp";
	}

	@RequestMapping(value = "/admin/item/regist.do", method = RequestMethod.GET)
	public String itemRegist(HttpSession session) {
		// System.out.println("상품 등록 페이지 이동");
		UserVO user = (UserVO) session.getAttribute("user");
		if (user == null) {
			return "redirect:../login.do?error=nonUser";
		}

		String userGrade = user.getGrade();
		if (!userGrade.equals("관리자")) {
			session.invalidate();
			return "redirect:../login.do?error=nonAdmin";
		}

		return "/admin/itemManagement/itemRegistration.jsp";
	}

	@RequestMapping(value = "/admin/item/regist.do", method = RequestMethod.POST)
	public String itemRegist(HttpSession session, ItemVO vo, Model model) {
		// System.out.println("상품 등록 중");
		UserVO user = (UserVO) session.getAttribute("user");
		if (user == null) {
			return "redirect:../login.do?error=nonUser";
		}

		String userGrade = user.getGrade();
		if (!userGrade.equals("관리자")) {
			session.invalidate();
			return "redirect:../login.do?error=nonAdmin";
		}

		itemService.insertItem(vo);
		return "redirect:/admin/item/list.do";
	}

	@RequestMapping(value = "/admin/item/edit.do", method = RequestMethod.GET)
	public String itemEditPage(HttpSession session, ItemVO vo, Model model) {
		UserVO user = (UserVO) session.getAttribute("user");
		if (user == null) {
			return "redirect:../login.do?error=nonUser";
		}

		String userGrade = user.getGrade();
		if (!userGrade.equals("관리자")) {
			session.invalidate();
			return "redirect:../login.do?error=nonAdmin";
		}

		ItemVO item = itemService.getItem(vo);
		model.addAttribute("item", item);
		return "/admin/itemManagement/itemEdit.jsp";
	}

	@RequestMapping(value = "/admin/item/edit.do", method = RequestMethod.POST)
	public String itemEditing(HttpSession session, ItemVO vo) {
		UserVO user = (UserVO) session.getAttribute("user");
		if (user == null) {
			return "redirect:../login.do?error=nonUser";
		}

		String userGrade = user.getGrade();
		if (!userGrade.equals("관리자")) {
			session.invalidate();
			return "redirect:../login.do?error=nonAdmin";
		}

		itemService.updateItem(vo);
		return "redirect:/admin/item/list.do";
	}

	@RequestMapping(value = "/admin/item/delete.do", method = RequestMethod.POST)
	public String itemDelete(HttpSession session, ItemVO vo, String selectedItems) {
		UserVO user = (UserVO) session.getAttribute("user");
		if (user == null) {
			return "redirect:../login.do?error=nonUser";
		}

		String userGrade = user.getGrade();
		if (!userGrade.equals("관리자")) {
			session.invalidate();
			return "redirect:../login.do?error=nonAdmin";
		}

		String[] itemNumbers = selectedItems.split(",");

		for (String itemNumberStr : itemNumbers) {
			int itemNumber = Integer.parseInt(itemNumberStr);
			vo.setItem_number(itemNumber);
			itemService.deleteItem(vo);
		}

		return "redirect:/admin/item/list.do";
	}
}
