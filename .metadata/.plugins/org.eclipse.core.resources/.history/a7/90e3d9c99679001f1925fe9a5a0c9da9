package com.cinnamoroll.store.board.impl;

import java.io.File;
import java.util.List;
import java.util.UUID;

import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Repository;
import org.springframework.web.multipart.MultipartFile;

import com.cinnamoroll.store.board.BoardVO;

@Repository
public class BoardDAO {
	@Autowired
	private SqlSessionTemplate mybatis;

//	@Value("${uploadPath}")
//	private String uploadPath;
	private String uploadPath = "/Users/hwajung/Documents/work/uploadImage/";

	// 게시판 추가
	public void insertBoard(BoardVO vo) {
		MultipartFile file = vo.getUploadFile();

		if (!file.isEmpty()) {
			try {
				// 기존 파일명
				String originalFileName = file.getOriginalFilename();

				// 확장자 분리
				String extension = originalFileName.substring(originalFileName.lastIndexOf("."));

				// 중복 방지 이름
				String uniqueFileName = UUID.randomUUID().toString() + extension;

				// 저장할 경로
				File dir = new File(uploadPath);

				// 디렉토리 존재하지 않으면 생성
				if (!dir.exists()) {
					dir.mkdirs();
				}

				// 파일을 저장할 경로 생성
				File uploadFile = new File(uploadPath + uniqueFileName);

				// 파일을 해당 경로에 저장
				file.transferTo(uploadFile);

				// 파일명을 VO 객체에 설정
				vo.setFilename(uniqueFileName);

				// 파일 정보와 함께 DB에 삽입
				//System.out.println(vo);
				mybatis.insert("BoardDAO.insertBoard", vo);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}else {
			mybatis.insert("BoardDAO.insertBoard", vo);
		}

	}

	// 게시판 수정
	public void updateBoard(BoardVO vo) {
		MultipartFile newFile = vo.getUploadFile();

		if (newFile != null & !newFile.isEmpty()) {
			try {
				// 기존 파일명
				String existingFileName = vo.getFileName();

				if (existingFileName != null && !existingFileName.isEmpty()) {
					File oldFile = new File(uploadPath + existingFileName);
					if (oldFile.exists()) {
						oldFile.delete();
					}
				}
				String originalFileName = newFile.getOriginalFilename();

				String extension = originalFileName.substring(originalFileName.lastIndexOf("."));

				String uniqueFileName = UUID.randomUUID().toString() + extension;

				File dir = new File(uploadPath);

				if (!dir.exists()) {
					dir.mkdirs();
				}

				File uploadFile = new File(uploadPath + uniqueFileName);

				newFile.transferTo(uploadFile);

				vo.setFileName(uniqueFileName);

				mybatis.update("BoardDAO.updateBoard", vo);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			mybatis.update("BoardDAO.updateBoard", vo);
		}
	}
	
	// 게시판 방문수 증가
	public void updateVisitCount(BoardVO vo) {
		mybatis.update("BoardDAO.updateVisitCount", vo);
	}

	// 게시판 삭제
	public void deleteBoard(BoardVO vo) {
		BoardVO board = (BoardVO) mybatis.selectOne("BoardDAO.getBoard", vo);
		String existingFile = board.getFileName();

		if (existingFile != null && !existingFile.isEmpty()) {
			File file = new File(uploadPath + existingFile);
			if (file.exists()) {
				file.delete();
			}
		}

		mybatis.delete("BoardDAO.deleteBoard", vo);
	}

	// 게시판 세부 정보 보기
	public BoardVO getBoard(BoardVO vo) {
		return (BoardVO) mybatis.selectOne("BoardDAO.getBoard", vo);
	}

	// 게시판 목록 보기
	public List<BoardVO> getBoardList() {
		return mybatis.selectList("BoardDAO.getBoardList");
	}

	// 게시판 목록 보기(페이징)
	public List<BoardVO> getBoardListPage(BoardVO vo) {
		return mybatis.selectList("BoardDAO.getBoardListPage", vo);
	}

	// 검색된 게시판 목록 보기(페이징)
	public List<BoardVO> getBoardSearchListPage(BoardVO vo) {
		return mybatis.selectList("BoardDAO.getBoardSearchListPage", vo);
	}
	
	// 게시판 총 개수
	public int getBoardCount() {
		return mybatis.selectOne("BoardDAO.getBoardCount");
	}

	// 검색된 게시판 총 개수
	public int getBoardSearchCount(BoardVO vo) {
		return mybatis.selectOne("BoardDAO.getBoardSearchCount", vo);
	}

}
