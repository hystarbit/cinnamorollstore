package com.cinnamoroll.view.item;

import java.io.File;
import java.nio.file.Files;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.cinnamoroll.store.item.ItemService;
import com.cinnamoroll.store.item.ItemVO;

@Controller
public class ItemController {
	
	@Autowired
	private ItemService itemService; // ItemService를 주입
	
//	@Value("#{uploadPath}")
//    private String uploadPath;
	
	@RequestMapping("/main.do")
	public String mainImage(ItemVO vo, Model model) {
		System.out.println("main 실행중");
		
		vo.setCategory("문구");
		List<ItemVO> stationaryItems = itemService.getItemCategoryList(vo);
		model.addAttribute("stationaryItems", stationaryItems);
		
		vo.setCategory("필기");
		List<ItemVO> writingItems = itemService.getItemCategoryList(vo);
		model.addAttribute("writingItems", writingItems);
		
		vo.setCategory("소품");
		List<ItemVO> propsItems = itemService.getItemCategoryList(vo);
		model.addAttribute("propsItems", propsItems);
		return "/user/main/index.jsp";
	}
	
	@RequestMapping("/itemList/all.do")
	public String itemListAll(ItemVO vo, Model model) {
		System.out.println("itemList 전체상품 실행중");
		
		List<ItemVO> items = itemService.getItemDisplayList(vo);
		model.addAttribute("items", items);
		model.addAttribute("category", "전체상품");
		return "/user/itemInfo/itemList.jsp";
	}
	
	@RequestMapping("/itemList/stationary.do")
	public String itemListStationary(ItemVO vo, Model model) {
		System.out.println("itemList 문구 실행중");
		
		vo.setCategory("문구");
		List<ItemVO> items = itemService.getItemCategoryList(vo);
		model.addAttribute("items", items);
		model.addAttribute("category", "문구");
		return "/user/itemInfo/itemList.jsp";
	}
	
	@RequestMapping("/itemList/writing.do")
	public String itemListWriting(ItemVO vo, Model model) {
		System.out.println("itemList 필기 실행중");
		
		vo.setCategory("필기");
		List<ItemVO> items = itemService.getItemCategoryList(vo);
		model.addAttribute("items", items);
		model.addAttribute("category", "필기");
		return "/user/itemInfo/itemList.jsp";
	}
	
	@RequestMapping("/itemList/props.do")
	public String itemListProps(ItemVO vo, Model model) {
		System.out.println("itemList 소품 실행중");
		
		vo.setCategory("소품");
		List<ItemVO> items = itemService.getItemCategoryList(vo);
		model.addAttribute("items", items);
		model.addAttribute("category", "소품");
		return "/user/itemInfo/itemList.jsp";
	}
	
	@RequestMapping("/itemDetail.do")
	public String itemDetail(ItemVO vo, Model model) {
		System.out.println("itemDetail 실행중");
		
		ItemVO item = itemService.getItem(vo);
		model.addAttribute("item", item);
		return "/user/itemInfo/itemDetail.jsp";
	}
	
	@RequestMapping("/admin/itemManage/list.do")
	public String itemManageList(ItemVO vo, Model model) {
		System.out.println("itemManageList 실행중");
		
		List<ItemVO> items = itemService.getItemList(vo);
		model.addAttribute("items", items);
		return "/admin/itemManagement/itemManageList.jsp";
	}
	
	
	@RequestMapping("/admin/itemManage/regist.do")
	public String itemRegist(ItemVO vo, Model model) {
		System.out.println("상품 등록 중");
		
		itemService.insertItem(vo);
		return "/admin/itemManagement/itemManageList.do";
	}
	
	@RequestMapping(value = "/admin/itemManage/edit.do", method=RequestMethod.GET)
	public String itemEditPage(ItemVO vo, Model model) {
		System.out.println("상품 수정 페이지 이동");
		
		ItemVO item = itemService.getItem(vo);
		model.addAttribute("item", item);
		return "/admin/itemManagement/itemEdit.jsp";
	}
	
	@RequestMapping(value = "/admin/itemManage/edit.do", method=RequestMethod.POST)
	public String itemEditing(ItemVO vo) {
		System.out.println("상품 수정 중");
		
		itemService.updateItem(vo);
		return "/admin/itemManagement/itemManageList.do";
	}
	
	@RequestMapping(value="/admin/itemManagement/itemDelete.do", method=RequestMethod.POST)
	public String itemDelete(ItemVO vo, String selectedItems) {
		System.out.println("상품 삭제 중");
		String[] itemNumbers = selectedItems.split(",");
		
		for(String itemNumberStr : itemNumbers) {
			int itemNumber = Integer.parseInt(itemNumberStr);
			vo.setItem_number(itemNumber);
			itemService.deleteItem(vo);
		}
		
		return "/admin/itemManagement/itemManageList.do";
	}
}
